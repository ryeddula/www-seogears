.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::SEOGears 3pm"
.TH WWW::SEOGears 3pm "2013-01-25" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::SEOGears \- Perl Interface for SEOGears API.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module provides you with an perl interface to interact with the Seogears \s-1API\s0.
.PP
.Vb 10
\&        use WWW::SEOGears;
\&        my $api = WWW::SEOGears\->new( { \*(Aqbrandname\*(Aq => $brandname,
\&                                        \*(Aqbrandkey\*(Aq => $brandkey,
\&                                        \*(Aqsandbox\*(Aq => $boolean 
\&        });
\&        $api\->newuser($params_for_newuser);
\&        $api\->statuscheck($params_for_statuscheck);
\&        $api\->inactivate($params_for_inactivate);
\&        $api\->update($params_for_update);
\&        $api\->get_tempauth($params_for_update);
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new"
.IX Subsection "new"
Constructor.
.PP
\&\fBInput\fR takes a hashref that contains:
.PP
.Vb 1
\&        Required:
\&
\&        brandname => Brandname as listed on seogears\*(Aq end.
\&        brandkey  => Brandkey received from seogears.
\&        
\&        Will croak if the above keys are not present.
\&
\&        Optional:
\&        sandbox   => If specified the sandbox API url is used instead of production.
\&        lwp       => hash of options that are passed on to the LWP::UserAgent object.
\&                     Example value: {\*(Aqparse_head\*(Aq => 0, \*(Aqssl_opts\*(Aq => {\*(Aqverify_hostname\*(Aq => 0, \*(AqSSL_verify_mode\*(Aq => \*(Aq0x00\*(Aq}}
.Ve
.SS "newuser"
.IX Subsection "newuser"
Creates a new user via the 'action=new' \s-1API\s0 call.
Since the 'userid' and 'email' can be used to fetch details about the seogears account, storing these values locally is recommended.
.PP
\&\fBInput\fR Requires that you pass in the following parameters for the call:
.PP
.Vb 10
\&        userid    => \*(Aq123456789\*(Aq
\&        email     => \*(Aqtest1@testing123.com\*(Aq
\&        name      => \*(AqTesting User\*(Aq
\&        phone     => \*(Aq1.5552223333\*(Aq
\&        domain    => \*(Aqsomedomain.com\*(Aq
\&        rep       => \*(Aqrep@domain.com\*(Aq
\&        placement => \*(Aqreg\*(Aq
\&        pack      => \*(Aq32\*(Aq
\&        price     => \*(Aq14.99\*(Aq
\&        months    => \*(Aq12\*(Aq
.Ve
.PP
Croaks if it is unable to sanitize the \f(CW%params\fR passed successfully, or the \s-1HTTP\s0 request to the \s-1API\s0 fails.
.PP
\&\fBOutput\fR Hash containing the data returned by the \s-1API:\s0
.PP
.Vb 5
\&        "success"   => 1
\&        "authkey"   => "GB0353566P163045n07157LUFGZntgqNF042MO692S19567CIGHj727437179300tE5nt8C362803K686Yrbj4643zausyiw"
\&        "bzid"      => "30928"
\&        "debuginfo" => "Success"
\&        "message"   => "New Account Created"
.Ve
.SS "statuscheck"
.IX Subsection "statuscheck"
Fetches information about a user via the 'action=statuscheck' \s-1API\s0 call.
.PP
\&\fBInput\fR Requires that you pass in the following parameters for the call:
.PP
.Vb 2
\&        userid    => \*(Aq123456789\*(Aq
\&        email     => \*(Aqtest1@testing123.com\*(Aq
.Ve
.PP
Croaks if it is unable to sanitize the \f(CW%params\fR passed successfully, or the \s-1HTTP\s0 request to the \s-1API\s0 fails.
.PP
\&\fBOutput\fR Hash containing the data returned by the \s-1API:\s0
.PP
.Vb 11
\&        "success"   =>  1,
\&        "inactive"  => "0"
\&        "authkey"   => "WO8407914M283278j87070OPWZGkmvsEG847ZB845Q28584YSBDt684478133472pV3ws1X655571X005Zlhh6810hsxjjka"
\&        "bzid"      => "30724"
\&        "brand"     => "brandname"
\&        "message"   => User is active. See variables for package details."
\&        "expdate"   => "2014\-01\-01 12:00:00"
\&        "debuginfo" => "User exists. See variables for status and package details."
\&        "pack"      => "32"
\&        "price"     => "14.99"
\&        "months"    => "12"
.Ve
.SS "inactivate"
.IX Subsection "inactivate"
Inactivates a user via the 'action=inactivate' \s-1API\s0 call.
.PP
\&\fBInput\fR Requires that you pass in the following parameters for the call:
.PP
.Vb 2
\&        "bzid"      => "30724"
\&        "authkey"   => "WO8407914M283278j87070OPWZGkmvsEG847ZB845Q28584YSBDt684478133472pV3ws1X655571X005Zlhh6810hsxjjka"
.Ve
.PP
Croaks if it is unable to sanitize the \f(CW%params\fR passed successfully, or the \s-1HTTP\s0 request to the \s-1API\s0 fails.
.PP
\&\fBOutput\fR Hash containing the data returned by the \s-1API:\s0
.PP
.Vb 3
\&        \*(Aqsuccess\*(Aq   => 1,
\&        \*(Aqbzid\*(Aq      => \*(Aq30724\*(Aq,
\&        \*(Aqdebuginfo\*(Aq => \*(AqSuccess BZID30724 WO8407914M283278j87070OPWZGkmvsEG847ZB845Q28584YSBDt684478133472pV3ws1X655571X005Zlhh6810hsxjjka\*(Aq
.Ve
.SS "activate"
.IX Subsection "activate"
Activates a previously inactivated user via the 'action=activate' \s-1API\s0 call.
.PP
\&\fBInput\fR Requires that you pass in the following parameters for the call:
.PP
.Vb 2
\&        \*(Aqbzid\*(Aq => \*(Aq32999\*(Aq
\&        \*(Aqauthkey\*(Aq => \*(AqBC1052837T155165x75618ZUKZDlbpfMW795RS245L23288ORUUq323360091155yP1ng7E548072L030Zssq0043pldkebf\*(Aq
.Ve
.PP
Croaks if it is unable to sanitize the \f(CW%params\fR passed successfully, or the \s-1HTTP\s0 request to the \s-1API\s0 fails.
.PP
\&\fBOutput\fR Hash containing the data returned by the \s-1API:\s0
.PP
.Vb 3
\&        \*(Aqsuccess\*(Aq => 1,
\&        \*(Aqbzid\*(Aq => \*(Aq32999\*(Aq,
\&        \*(Aqdebuginfo\*(Aq => \*(AqSuccess BZID32999 BC1052837T155165x75618ZUKZDlbpfMW795RS245L23288ORUUq323360091155yP1ng7E548072L030Zssq0043pldkebf\*(Aq
.Ve
.SS "update"
.IX Subsection "update"
Updates/Renews a user via the 'action=update' \s-1API\s0 call.
.PP
\&\fBInput\fR Requires that you pass in the following parameters for the call:
.PP
.Vb 2
\&        "bzid"      => "30724"
\&        "authkey"   => "WO8407914M283278j87070OPWZGkmvsEG847ZB845Q28584YSBDt684478133472pV3ws1X655571X005Zlhh6810hsxjjka"
\&
\&        Optional params:
\&        "email"     => "newemail@testing123.com"
\&        "phone"     => "1.5552224444"
\&        "pack"      => "33"
\&        "months"    => "24"
\&        "price"     => "14.99"
.Ve
.PP
If pack is specified, then a price must be specified along with it.
.PP
Croaks if it is unable to sanitize the \f(CW%params\fR passed successfully, or the \s-1HTTP\s0 request to the \s-1API\s0 fails.
.PP
\&\fBOutput\fR Hash containing the data returned by the \s-1API:\s0
.PP
.Vb 3
\&        \*(Aqsuccess\*(Aq => 1,
\&        \*(Aqbzid\*(Aq => \*(Aq30724\*(Aq,
\&        \*(Aqdebuginfo\*(Aq => \*(AqSuccess\*(Aq
.Ve
.SS "get_tempauth"
.IX Subsection "get_tempauth"
Retrieves the tempauth key for an account from the \s-1API\s0.
.PP
\&\fBInput\fR Requires that you pass in the following parameters for the call:
.PP
.Vb 2
\&        bzid      => \*(Aq31037\*(Aq
\&        authkey   => \*(AqHH1815009C705940t76917IWWAQdvyoDR077CO567M05324BHUCa744638889409oM8kw5E097737M626Gynd3974rsetvzf\*(Aq
.Ve
.PP
Croaks if it is unable to sanitize the \f(CW%params\fR passed successfully, or the \s-1HTTP\s0 request to the \s-1API\s0 fails.
.PP
\&\fBOutput\fR Hash containing the data returned by the \s-1API:\s0
.PP
.Vb 4
\&        \*(Aqsuccess\*(Aq     => 1,
\&        \*(Aqbzid\*(Aq        => \*(Aq31037\*(Aq,
\&        \*(Aqtempauthkey\*(Aq => \*(AqOU8937pI03R56Lz493j0958US34Ui9mgJG831JY756X0Tz04WGXVu762IuIxg7643vV6ju9M96J951V430Qvnw41b4qzgp2pu\*(Aq,
\&        \*(Aqmessage\*(Aq     => \*(Aq\*(Aq
.Ve
.SS "get_templogin_url"
.IX Subsection "get_templogin_url"
Generates the temporary login \s-1URL\s0 with which you can access the seogears' control panel. Essentially acts as a wrapper that stringifies the data returned by get_tempauth.
.PP
\&\fBInput\fR Requires that you pass in either:
.PP
.Vb 2
\&        userid    => \*(Aq123456789\*(Aq
\&        email     => \*(Aqtest1@testing123.com\*(Aq
.Ve
.PP
Or
.PP
.Vb 2
\&        bzid      => \*(Aq31037\*(Aq
\&        authkey   => \*(AqHH1815009C705940t76917IWWAQdvyoDR077CO567M05324BHUCa744638889409oM8kw5E097737M626Gynd3974rsetvzf\*(Aq
.Ve
.PP
If the bzid/authkey are not provied, then it will attempt to look up the proper information using the userid and email provided.
.PP
Croaks if it is unable to sanitize the \f(CW%params\fR passed successfully, or the \s-1HTTP\s0 request to the \s-1API\s0 fails.
.PP
\&\fBOutput\fR Returns the login url that can be used to access the control panel on SEOgears.
Example: https://seogearstools.com/api/login.html?bzid=31037&tempauthkey=OU8937pI03R56Lz493j0958US34Ui9mgJG831JY756X0Tz04WGXVu762IuIxg7643vV6ju9M96J951V430Qvnw41b4qzgp2pu
.SS "get_userurl, get_authurl, get_loginurl"
.IX Subsection "get_userurl, get_authurl, get_loginurl"
Return the corresponding api url that is being used.
.SS "get_error"
.IX Subsection "get_error"
Returns \f(CW$self\fR\->{'error'}
.SS "get_brandname"
.IX Subsection "get_brandname"
Returns \f(CW$self\fR\->{'brandname'}
.SS "get_brandkey"
.IX Subsection "get_brandkey"
Returns \f(CW$self\fR\->{'brandkey'}
.SH "Internal Subroutines"
.IX Header "Internal Subroutines"
The following are not meant to be used directly, but are available if 'finer' control is required.
.SS "_make_request_handler"
.IX Subsection "_make_request_handler"
Wraps the call to _make_request and handles error checks.
.PP
\&\fB\s-1INPUT\s0\fR Takes the 'action' and sanitized paramaters hashref as input.
.PP
\&\fBOutput\fR Returns undef on failure (sets \f(CW$self\fR\->{error} with the proper error). Returns a hash with the decoded json data from the \s-1API\s0 server if successful.
.SS "_make_request"
.IX Subsection "_make_request"
Makes the \s-1HTTP\s0 request to the \s-1API\s0 server.
.PP
\&\fBInput\fR The full uri to perform the \s-1HTTP\s0 request on.
.PP
\&\fBOutput\fR Returns an array containing the http response, and error.
If the \s-1HTTP\s0 request was successful, then the error is blank.
If the \s-1HTTP\s0 request failed, then the response is blank and the error is the status line from the \s-1HTTP\s0 response.
.SS "_stringify_params"
.IX Subsection "_stringify_params"
Stringifies the content of a hash such that the output can be used as the \s-1URI\s0 body of a \s-1GET\s0 request.
.PP
\&\fBInput\fR A hashref containing the sanatizied parameters for an \s-1API\s0 call.
.PP
\&\fBOutput\fR String with the keys and values stringified as so '&key1=value1&key2=value2'
.SS "_sanitize_params"
.IX Subsection "_sanitize_params"
sanitizes the data in the hashref passed for the action specified.
.PP
\&\fBInput\fR  The 'action', and a hashref that has the data that will be sanitized.
.PP
\&\fBOutput\fR Boolean value indicating success. The hash is altered in place as needed.
.SS "_sanitize_params_newuser"
.IX Subsection "_sanitize_params_newuser"
sanitizes the data in the hashref passed for the 'action=new' \s-1API\s0 call.
.PP
\&\fBInput\fR The following keys are required. If any of them are missing, it will set \f(CW$self\fR\->{error} and return
.PP
.Vb 10
\&        userid
\&        name
\&        email
\&        phone
\&        domain
\&        rep
\&        pack
\&        price
\&        placement
\&        months
.Ve
.PP
\&\fBOutput\fR Boolean value indicating success. The hash is altered in place as needed.
.PP
The 'expdate' value is calculated via \fB_months_from_now($params\->{'months'})\fR.
.SS "_sanitize_params_statuscheck"
.IX Subsection "_sanitize_params_statuscheck"
sanitizes the data in the hashref passed for the 'action=statuscheck' \s-1API\s0 call.
.PP
\&\fBInput\fR The following keys are required. If any of them are missing, it will set \f(CW$self\fR\->{error} and return
.PP
.Vb 2
\&        userid
\&        email
.Ve
.PP
\&\fBOutput\fR Boolean value indicating success.
.SS "_sanitize_params_inactivate_auth"
.IX Subsection "_sanitize_params_inactivate_auth"
sanitizes the data in the hashref passed for the 'action=inactivate' and 'auth' \s-1API\s0 calls.
.PP
\&\fBInput\fR The following keys are required. If any of them are missing, it will set \f(CW$self\fR\->{error} and return
.PP
.Vb 2
\&        bzid
\&        authkey
.Ve
.PP
\&\fBOutput\fR Boolean value indicating success.
.SS "_sanitize_params_update"
.IX Subsection "_sanitize_params_update"
sanitizes the data in the hashref passed for the 'action=update' \s-1API\s0 call.
.PP
\&\fBInput\fR The following keys are required. If any of them are missing, it will set \f(CW$self\fR\->{error} and return
.PP
.Vb 2
\&        bzid
\&        authkey
\&
\&        Optional parameters:
\&        email
\&        months
\&        pack
\&        phone
\&        price
\&        expdate
.Ve
.PP
If 'pack' is specified, then 'price' must also be given.
If 'months' is specified, but 'expdate' is not, then a new 'expdate' value is calculated via \fB_months_from_now($params\->{'months'})\fR
.PP
\&\fBOutput\fR Boolean value indicating success. The hash is altered in place as needed.
.SS "_check_required_keys"
.IX Subsection "_check_required_keys"
Checks the params hashref provided for keys specified in the hash for wanted keys.
.PP
\&\fBInput\fR First  arg: Hashref that contains the data to be checked. 
	     Second arg: Hashref that holds the keys to check for.
.PP
\&\fBOutput\fR Blank string if successful.
	      Error string containing a list of all of the keys that are mising on failure.
.SS "_remove_unwanted_keys"
.IX Subsection "_remove_unwanted_keys"
Deletes keys from the provided params hashref, if they are not listed in the hash for wanted keys.
.PP
\&\fBInput\fR First  arg: Hashref that contains the data to be checked. 
	     Second arg: Hashref that holds the keys to check for.
.PP
\&\fBOutput\fR None/undef.
.SS "_valid_months"
.IX Subsection "_valid_months"
Returns true if the 'months' value specified is a valid. Currently, you can set renewals to occur on a monthly or yearly (upto 3 years), so the valid values are:
.PP
.Vb 4
\&        1
\&        12
\&        24
\&        36
.Ve
.SS "_get_apiurl"
.IX Subsection "_get_apiurl"
Depending on the action passed, it will return the initial part of the \s-1URL\s0 that you can use along with the _stringify_params method to generate the full \s-1GET\s0 url.
.PP
Valid actions and the corresponding strings that are returned:
.PP
.Vb 6
\&        \*(Aqauth\*(Aq        => get_authurl().\*(Aq?\*(Aq
\&        \*(Aqlogin\*(Aq       => get_loginurl().\*(Aq?\*(Aq
\&        \*(Aqnew\*(Aq         => get_userurl().\*(Aq?action=new\*(Aq
\&        \*(Aqstatuscheck\*(Aq => get_userurl().\*(Aq?action=statuscheck\*(Aq
\&        \*(Aqinactivate\*(Aq  => get_userurl().\*(Aq?action=inactivate\*(Aq
\&        \*(Aqupdate\*(Aq      => get_userurl().\*(Aq?action=update\*(Aq
.Ve
.PP
If no valid action is specified, it will set the \f(CW$self\fR\->{error} and return;
.SS "_error"
.IX Subsection "_error"
Internal method that is used to report and set \f(CW$self\fR\->{'error'}.
.PP
It will croak if called with a true second argument. Such as:
.PP
.Vb 1
\&        $self\->_error($msg, 1);
.Ve
.SS "_months_from_now"
.IX Subsection "_months_from_now"
Internal helper method that will calculate the expiration date thats x months in the future \- calculated via Date::Calc's \fIAdd_Delta_YMDHMS()\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Rishwanth Yeddula, \f(CW\*(C`<ryeddula at hostgator.com>\*(C'\fR
.PP
Hostgator.com \s-1LLC\s0
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-www\-seogears at rt.cpan.org\*(C'\fR, or through
the web interface at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=WWW\-SEOGears <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=WWW-SEOGears>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&        perldoc WWW::SEOGears
.Ve
.PP
You can also review the \s-1API\s0 documentation provided by SEOgears for more information.
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker (report bugs here)
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=WWW\-SEOGears <http://rt.cpan.org/NoAuth/Bugs.html?Dist=WWW-SEOGears>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/WWW\-SEOGears <http://annocpan.org/dist/WWW-SEOGears>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/WWW\-SEOGears <http://cpanratings.perl.org/d/WWW-SEOGears>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/WWW\-SEOGears/ <http://search.cpan.org/dist/WWW-SEOGears/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Rishwanth Yeddula, Hostgator.com \s-1LLC\s0.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE\s0 \s-1PACKAGE\s0 \s-1IS\s0 \s-1PROVIDED\s0 \s-1BY\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0
\&\s-1AND\s0 \s-1CONTRIBUTORS\s0 "\s-1AS\s0 \s-1IS\s0' \s-1AND\s0 \s-1WITHOUT\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0.
\&\s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0, \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0
\&\s-1PURPOSE\s0, \s-1OR\s0 NON-INFRINGEMENT \s-1ARE\s0 \s-1DISCLAIMED\s0 \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0
\&\s-1YOUR\s0 \s-1LOCAL\s0 \s-1LAW\s0. \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1LAW\s0, \s-1NO\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0 \s-1OR\s0
\&\s-1CONTRIBUTOR\s0 \s-1WILL\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1DIRECT\s0, \s-1INDIRECT\s0, \s-1INCIDENTAL\s0, \s-1OR\s0
\&\s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1IN\s0 \s-1ANY\s0 \s-1WAY\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OF\s0 \s-1THE\s0 \s-1PACKAGE\s0,
\&\s-1EVEN\s0 \s-1IF\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0 \s-1SUCH\s0 \s-1DAMAGE\s0.
